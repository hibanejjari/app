# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hKQg41aaQSDepKSvnk0XmjktKPiCoppH
"""

# app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from pptx import Presentation
from pptx.util import Inches
import io
import tempfile

st.set_page_config(layout="wide")
st.title("ðŸ“Š Purchase Order Report Generator")

# --- Upload Excel file ---
uploaded_file = st.file_uploader("Upload your Excel work report", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)
    df.columns = df.columns.str.strip()  # Clean column names

    # --- Compute Days Difference ---
    df["Creation Date"] = pd.to_datetime(df["Creation Date"], errors='coerce')
    df["Released Date"] = pd.to_datetime(df["Released Date"], errors='coerce')
    df["Days Difference"] = (df["Released Date"] - df["Creation Date"]).dt.days

    # --- Graph selection ---
    graph_options = {
        "PO Avg Time by User: Approved": lambda d: d[d["Overall Status"] == "APPROVED"].groupby("Approver Name")["Days Difference"].mean(),
        "PO Count by User: Approved": lambda d: d[d["Overall Status"] == "APPROVED"].groupby("Approver Name")["Purchase Order No."].count(),
        "PO Count by User: In Progress": lambda d: d[d["Overall Status"] == "In Progress"].groupby("Approver Name")["Purchase Order No."].count(),
        "PO Avg Time by User: In Progress": lambda d: d[d["Overall Status"] == "In Progress"].groupby("Approver Name")["Days Difference"].mean(),
        "POs Cancelled/Deleted by Company": lambda d: d[d["Overall Status"].isin(["Cancelled", "DELETED"])].groupby("Company Code Decription")["Purchase Order No."].count(),
        "PO Avg Time by Company: Approved": lambda d: d[d["Overall Status"] == "APPROVED"].groupby("Company Code Decription")["Days Difference"].mean(),
        "PO Avg Time by Company: In Progress": lambda d: d[d["Overall Status"] == "In Progress"].groupby("Company Code Decription")["Days Difference"].mean(),
    }

    selected_graphs = st.multiselect("Select graphs to generate", list(graph_options.keys()))

    # --- Visualization Section ---
    if selected_graphs:
        st.header("ðŸ“ˆ Live Chart Previews")

        chart_images = []
        for title in selected_graphs:
            st.subheader(title)
            chart_data = graph_options[title](df)

            if chart_data.empty:
                st.warning("No data for this chart.")
                continue

            fig, ax = plt.subplots(figsize=(6, 4))
            chart_data.sort_values().plot(kind="bar", ax=ax)
            ax.set_title(title)
            ax.set_ylabel("Value")
            ax.set_xticklabels(chart_data.index, rotation=45, ha='right')
            st.pyplot(fig)

            # Save to image for PPT
            img_buf = io.BytesIO()
            fig.savefig(img_buf, format='png')
            chart_images.append((title, img_buf))
            plt.close(fig)

        # --- Download PowerPoint ---
        if st.button("ðŸ“¥ Generate and Download PowerPoint"):
            ppt = Presentation()
            slide_layout = ppt.slide_layouts[5]

            for title, img_buf in chart_images:
                slide = ppt.slides.add_slide(slide_layout)
                slide.shapes.title.text = title

                img_buf.seek(0)
                with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp_img:
                    tmp_img.write(img_buf.read())
                    tmp_img_path = tmp_img.name

                slide.shapes.add_picture(tmp_img_path, Inches(1), Inches(1.5), width=Inches(8))

            with tempfile.NamedTemporaryFile(delete=False, suffix=".pptx") as tmp_ppt:
                ppt.save(tmp_ppt.name)
                st.success("âœ… PowerPoint generated!")
                st.download_button("ðŸ“¤ Download .pptx", data=open(tmp_ppt.name, "rb"), file_name="PO_Report.pptx")